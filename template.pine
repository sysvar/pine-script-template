//@version=5
// Author https://github.com/sysvar/pine-script-template

strategy(title='Git Pine Script v5 Template', shorttitle='TEMPLATE', overlay=true, pyramiding=0, initial_capital=40000, default_qty_type=strategy.fixed, default_qty_value=500000, currency=currency.USD, commission_type=strategy.commission.cash_per_contract, commission_value=0.0000026)

// === CORE VARIABLES ===
var usr_logic_buy = false
var usr_logic_sell = false



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//    EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣   EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// === USER STRATEGY ===

// Variables
var usr_logic_ema_buy = false
var usr_logic_ema_sell = false
var usr_logic_pipVlaue = int(10000)

// Input
usr_input_ema_length = input.int(9, step=1, title="EMA Length", group="User Strategy")
usr_input_ema_diff= input.float(0.5, step=0.1, minval=0.1, maxval=1000, title="EMA Above/Below Pips", group="User Strategy", tooltip="Trigger Entry when above or below EMA by this number of pips")

// Function
usr_funct_ema = ta.ema(close, usr_input_ema_length)

// Logic
if close > (usr_funct_ema + (usr_input_ema_diff/usr_logic_pipVlaue))      // 3 Pips Above EMA then Sell (Reversal)
    usr_logic_ema_sell := true

if close < (usr_funct_ema - (usr_input_ema_diff/usr_logic_pipVlaue))      // 3 Pips Below EMA then Buy (Reversal)
    usr_logic_ema_buy := true

// Plot
plot(usr_funct_ema, color=color.yellow, title="EMA")

// Decision
if usr_logic_ema_buy == true
    usr_logic_buy := true

if usr_logic_ema_sell == true
    usr_logic_sell := true

// Remember to RESET THESE VARIABLES at the END of the SCRIPT !



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//    EDIT  ⇡  EDIT  ⇡  EDIT  ⇡  EDIT  ⇡  EDIT  ⇡  EDIT  ⇡  EDIT  ⇡  EDIT  ⇡   EDIT  ⇡  EDIT  ⇡  EDIT  ⇡  EDIT    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// === CORE VARIABLES ===
var sys_group_name_gen="General -----------------------------------------------------------------------------------------"

var sys_logic_buy = false
var sys_logic_sell = false


// === CORE GUI INPUTS ===
sys_input_pip = input.string('10000', title="Pip Symbol Value", options = ["1", "10", "100", "1000", "10000", "100000"], group=sys_group_name_gen, tooltip="Count No. of digits after decimal, for example: EUR/USD with a price of 1.09395 = 10000, because 5 digits after decimal")
sys_input_general_positionSize = input.int(500000, step=1, maxval=9999999999999999, title="Position Size", group=sys_group_name_gen, tooltip="Units for trade")

sys_input_dire = input.string('Both', title='Trade Direction', options = ["Both", "Only Buy", "Only Sell", "None"], group="Trading Entry")
sys_input_dire_reverse = input.bool(false, title='Reverse Buy/Sell', group="Trading Entry", tooltip="When entering trade, reverse entry")

sys_input_exit_tpsl = input.bool(true, "(A) Take Profit / Stop Loss", group="Trading Exit (Select Only 1)")
sys_input_exit_tpts = input.bool(false, "(B) Take Profit / Trailing Stop (TODO)", group="Trading Exit (Select Only 1)")
sys_input_exit_hlrr = input.bool(false, "(C) Recent High/Low and Risk Reward Ratio", group="Trading Exit (Select Only 1)")

sys_input_risk_tpslProfit = input.float(9, step=0.1, title="(A) Take Profit Pips", group="Risk Management (Primary)")
sys_input_risk_tpslLoss = input.float(4, step=0.1, title="(A) Stop Loss Pips", group="Risk Management (Primary)")
sys_input_risk_hlrrLookBack = input.int(20, step=1, title="(C) Lookback Period High/Low", group="Risk Management (Primary)")
sys_input_risk_hlrrExtraPips = input.float(0.5, step=0.1, title="(C) Extra Pips Above/Below", group="Risk Management (Primary)")
sys_input_risk_hlrrRiskReward = input.float(1.5, step=0.1, title="(C) Risk Reward Ratio", group="Risk Management (Primary)")

sys_input_risk_waitLoss = input.int(0, step=1, title="Lost Trade Wait Candles", group="Risk Management (Secondary)", tooltip="No. of bars to wait after lost trade")
sys_input_risk_newsPips = input.int(7, step=1, title="News Pip Trigger", group="Risk Management (Secondary)", tooltip="No. of pip movement in order to trigger news event")
sys_input_risk_newsCandles = input.int(10, step=1, title="News Trade Wait Candles", group="Risk Management (Secondary)", tooltip="No. of bars to wait after news event")

sys_input_backtest_range = input.bool(false, "Enable Backtesting Dates", group="Backtest Range Restrictions", tooltip="Not for live trading")
sys_input_backtest_start = input.time(timestamp("14 Nov 2023 07:00 +0000"), "Start Date (UTC 0)", group="Backtest Range Restrictions")
sys_input_backtest_end = input.time(timestamp("14 Nov 2023 19:00 +0000"), "End Date (UTC 0)", group="Backtest Range Restrictions")

sys_input_time_zone = input.string('UTC', title='Timezone', options = ["UTC-12", "UTC-11", "UTC-10", "UTC-9", "UTC-8", "UTC-7", "UTC-6", "UTC-5", "UTC-4", "UTC-3", "UTC-2", "UTC-1", "UTC", "UTC+0", "UTC+1", "UTC+2", "UTC+3", "UTC+4", "UTC+5", "UTC+6", "UTC+7", "UTC+8", "UTC+9", "UTC+10", "UTC+11", "UTC+12"], group='Trading Time Range Restrictions')
sys_input_time_hours = input.session("0700-1900", "Allowed hours", group="Trading Time Range Restrictions")
sys_input_time_days = input.string("123456", "Allowed Days", group="Trading Time Range Restrictions", tooltip="1 = Sunday, 7 = Saturday")

sys_input_safety = input.bool(false, "Enable Safety Settings", group="Safety Management", tooltip="Avoid with backtesting")
sys_input_safety_positionSize = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Position Size", group="Safety Management", tooltip="Units for trade")
sys_input_safety_drawdownCash = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Drawdown Cash", group="Safety Management", tooltip="Money lost in total")
sys_input_safety_drawdownEquity = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Drawdown Account Equity %", group="Safety Management", tooltip="Percentage of Account Equity")
sys_input_safety_consLossDays = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Consecutive Days Lost", group="Safety Management", tooltip="Days in a row lost")
sys_input_safety_intradayTrades = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Intra-Day Trades", group="Safety Management", tooltip="Max trades within a day")
sys_input_safety_intradayLossCash = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Day Cash Loss", group="Safety Management", tooltip="Max loss within a day")
sys_input_safety_intradayLossEquity = input.int(9999999999999999, step=1, maxval=9999999999999999, title="Max Day Account Equity % Loss", group="Safety Management", tooltip="Max loss within a day")


// === CORE SAFETY FEATURES ===
strategy.risk.max_position_size(sys_input_safety ? sys_input_safety_positionSize : 9999999999999999)
strategy.risk.max_drawdown(sys_input_safety ? sys_input_safety_drawdownCash : 9999999999999999, type=strategy.cash)
strategy.risk.max_drawdown(sys_input_safety ? sys_input_safety_drawdownEquity : 9999999999999999, type=strategy.percent_of_equity)
strategy.risk.max_cons_loss_days(sys_input_safety ? sys_input_safety_consLossDays : 9999999999999999)
strategy.risk.max_intraday_filled_orders(sys_input_safety ? sys_input_safety_intradayTrades : 9999999999999999)
strategy.risk.max_intraday_loss(sys_input_safety ? sys_input_safety_intradayLossCash : 9999999999999999, type=strategy.cash)
strategy.risk.max_intraday_loss(sys_input_safety ? sys_input_safety_intradayLossEquity : 9999999999999999, type=strategy.percent_of_equity)
strategy.risk.allow_entry_in(sys_input_dire == "Only Buy" ? strategy.direction.long : (sys_input_dire == "Only Sell" ? strategy.direction.short : strategy.direction.all))


// === CORE FUNCT/LOGIC ===
sys_funct_pip = str.tonumber(sys_input_pip)

if sys_input_dire == "None"
    log.info("usr_logic_buy: {0}", usr_logic_buy)
    log.info("usr_logic_sell: {0}", usr_logic_sell)
    usr_logic_buy := false
    usr_logic_sell := false

sys_logic_backtest = sys_input_backtest_range == false or (sys_input_backtest_range == true and (time >= sys_input_backtest_start and time <= sys_input_backtest_end))

sys_logic_time = time(timeframe.period, sys_input_time_hours + ":" + sys_input_time_days, sys_input_time_zone)

sys_funct_risk_waitLoss = (strategy.losstrades > strategy.losstrades[1]) and (strategy.wintrades == strategy.wintrades[1]) and (strategy.eventrades == strategy.eventrades[1])
sys_funct_risk_barSince = ta.barssince(sys_funct_risk_waitLoss)
sys_logic_waitLoss = not (sys_funct_risk_barSince < sys_input_risk_waitLoss)

sys_logic_risk_newsdecimal = sys_input_risk_newsPips / sys_funct_pip  // Important conversion
sys_funct_news = array.new_float(0)
for i = 0 to sys_input_risk_newsCandles - 1
    array.push(sys_funct_news, i == 0 ? high - low : high[i] - low[i])
sys_logic_news = not (array.max(sys_funct_news) > sys_logic_risk_newsdecimal)

sys_logic_position = not (strategy.position_size < 0 or strategy.position_size > 0)

sys_logic_backtest_outRange = sys_input_backtest_range and (time < sys_input_backtest_start or time > sys_input_backtest_end)
sys_logic_trading_outRange  = not sys_logic_time

sys_logic_tpsl_profit = sys_input_risk_tpslProfit * 10
sys_logic_tpsl_loss = sys_input_risk_tpslLoss * 10

sys_logic_hlrr_sellEntry = (((ta.highest(high, sys_input_risk_hlrrLookBack) + (sys_input_risk_hlrrExtraPips / sys_funct_pip)) - close) * sys_funct_pip) * 10
sys_logic_hlrr_buyEntry = ((((ta.lowest(low, sys_input_risk_hlrrLookBack) - (sys_input_risk_hlrrExtraPips / sys_funct_pip)) - close) * sys_funct_pip) * 10) * -1
sys_logic_hlrr_sellExit = sys_logic_hlrr_sellEntry * sys_input_risk_hlrrRiskReward
sys_logic_hlrr_buyExit = sys_logic_hlrr_buyEntry * sys_input_risk_hlrrRiskReward

sys_logic_alert_profit = sys_input_risk_tpslProfit / 10
sys_logic_alert_loss = sys_input_risk_tpslLoss / 10


// === CORE GRAPH SHADING ===
bgcolor(sys_logic_backtest_outRange ? color.new(color.red, 90) : na, title="Backtest Range")
bgcolor(sys_logic_trading_outRange ? color.new(color.red, 90) : na, title="Non-Trading Range")


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// === FINAL LOGIC ===

//log.info("usr_logic_buy: {0}", usr_logic_buy)
if usr_logic_buy == true
    if sys_input_dire_reverse
        sys_logic_sell := true
    else
        sys_logic_buy := true

//log.info("usr_logic_sell: {0}", usr_logic_sell)
if usr_logic_sell == true
    if sys_input_dire_reverse
        sys_logic_buy := true
    else
        sys_logic_sell := true



// === CORE POSITION EXECUTION ===

if sys_logic_buy and sys_logic_time and sys_logic_backtest and sys_logic_news and sys_logic_waitLoss and sys_logic_position
    //log.info("sys_logic_backtest: {0}\n sys_input_dire_buy: {1}\n sys_logic_news: {2}\n sys_logic_position: {3}", sys_logic_backtest, sys_input_dire_buy, sys_logic_news, sys_logic_position)
    if sys_input_exit_tpsl
        //alert('1234567891234,buy,' +syminfo.ticker+ ',sl=' +str.tostring(sys_logic_tpsl_loss)+ ',tp=' +str.tostring(sys_logic_tpsl_profit)+ ',risk=5', alert.freq_once_per_bar_close)    // PineConnector Automation
        strategy.entry("TPSL Buy Entry", strategy.long, sys_input_general_positionSize)
        strategy.exit("TPSL Buy Exit", from_entry ="TPSL Buy Entry", loss=sys_logic_tpsl_loss, profit=sys_logic_tpsl_profit)
    if sys_input_exit_tpts
        log.info("Buy - Take Profit Trailing Stop NOT IMPLEMENTED YET")
    if sys_input_exit_hlrr
        strategy.entry("HLRR Buy Entry", strategy.long, sys_input_general_positionSize)
        strategy.exit("HLRR Buy Exit", from_entry ="HLRR Buy Entry", loss=sys_logic_hlrr_buyEntry, profit=sys_logic_hlrr_buyExit)


if sys_logic_sell and sys_logic_time and sys_logic_backtest and sys_logic_news and sys_logic_waitLoss and sys_logic_position
    //log.info("sys_logic_backtest: {0}\n sys_input_dire_sell: {1}\n sys_logic_news: {2}\n sys_logic_position: {3}", sys_logic_backtest, sys_input_dire_sell, sys_logic_news, sys_logic_position)
    if sys_input_exit_tpsl
        //alert('1234567891234,sell,' +syminfo.ticker+ ',sl=' +str.tostring(sys_logic_tpsl_loss)+ ',tp=' +str.tostring(sys_logic_tpsl_profit)+ ',risk=5', alert.freq_once_per_bar_close)    // PineConnector Automation
        strategy.entry("TPSL Sell Entry", strategy.short, sys_input_general_positionSize)
        strategy.exit("TPSL Sell Exit", from_entry ="TPSL Sell Entry", loss=sys_logic_tpsl_loss, profit=sys_logic_tpsl_profit)
    if sys_input_exit_tpts
        log.info("Sell - Take Profit Trailing Stop NOT IMPLEMENTED YET")
    if sys_input_exit_hlrr
        strategy.entry("HLRR Sell Entry", strategy.short, sys_input_general_positionSize)
        strategy.exit("HLRR Sell Exit", from_entry ="HLRR Sell Entry", loss=sys_logic_hlrr_sellEntry, profit=sys_logic_hlrr_sellExit)



// === CORE RESET VARIABLES ===

sys_logic_position := false
sys_logic_buy := false
sys_logic_sell := false
usr_logic_buy := false
usr_logic_sell := false



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//    EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT  ⇣   EDIT  ⇣  EDIT  ⇣  EDIT  ⇣  EDIT    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// === USER RESET VARIABLES ===
usr_logic_ema_buy := false
usr_logic_ema_sell := false
